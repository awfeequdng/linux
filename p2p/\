/*************************************************************************
> File Name: s.c
> Author: 
> Mail: 
> Created Time: 2017年05月01日 星期一 16时59分33秒
************************************************************************/

#include<stdio.h>
#include<stdlib.h>
#include<errno.h>
#include<string.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<sys/socket.h>
#include<sys/wait.h>
#include<arpa/inet.h>
#include<unistd.h>


#define   MYPORT  -1
#define  BACKLOG  10
#define MAXDATASIZE 100

void main()
{
    char a[100] = {'\0'};
    char ch;
    char buf[MAXDATASIZE];
    int numbytes;
    pid_t pid;

    int sock_fd,new_fd;

    struct sockaddr_in my_addr;

    struct sockaddr_in their_addr;
    int sin_size;

    if((sock_fd = socket(AF_INET,SOCK_STREAM,0))==-1)
    {
        perror("socket");
        exit(1);

    }
    my_addr.sin_family =AF_INET;
    my_addr.sin_port =htons(MYPORT);
    my_addr.sin_addr.s_addr = INADDR_ANY;
    bzero(&(my_addr.sin_zero),8);
    
    int on = 1;
    if(setsockopt(sock_fd,SOL_SOCKET,SO_REUSEADDR,&on,sizeof(on)) < 0)
    {
        perror("setsockopt");
        exit(1);
    }
    if(bind(sock_fd,(struct sockaddr *)&my_addr,sizeof(struct sockaddr))==-1)
    {
        perror("bind");
        exit(1);
    }
    if(listen(sock_fd,BACKLOG)==-1)
    {
        perror("listen");
        exit(1);
    }
    while(1)
    {
        sin_size = sizeof(struct sockaddr_in);
        if((new_fd=accept(sock_fd,(struct sockaddr *)&their_addr,&sin_size))==-1)
        {
            perror("accept");
            continue;
        }
        printf("server: got connection from %s\n",inet_ntoa(their_addr.sin_addr));

        pid = fork();//创建子进程
        if(pid > 0) //父进程读取客户端的数据
        {
            while(1)
            {
                numbytes = recv(new_fd,buf,MAXDATASIZE,0);
                buf[numbytes]='\0';
                printf("Received from client:%s",buf);
                putchar(10);
            }
        close(new_fd);
        close(sock_fd);
        kill(pid,SIGUSR1);
        }
        else if(pid == 0) //子程序负责向客户端写入数据
        {
            int i = 0;
            printf("Send to client: ");
            while((ch = getchar()) != '\n')
            {
                a[i++] = ch;
            }
            send(new_fd,a,strlen(a),0);

            memset (a,0,sizeof(a)); 

            printf("Send to client: ");
        }
        else if(pid == -1) //创建子进程错误
        {
            perror("fork");
            close(new_fd);
            close(sock_fd);
            exit(-1);
        }

      /* while(1)
        {
            int i = 0;
            numbytes = recv(new_fd,buf,MAXDATASIZE,0);
            buf[numbytes]='\0';
            printf("Received from client:%s",buf);
            putchar(10);

            printf("Send to client: ");
            while((ch = getchar()) != '\n')
            {
                a[i++] = ch;
            }
            send(new_fd,a,strlen(a),0);

            memset (a,0,sizeof(a)); 
        }

        close(new_fd);
        close(sock_fd);
        */

    }
while(waitpid(-1,NULL,WNOHANG)>0);
}


